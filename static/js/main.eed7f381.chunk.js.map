{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.js","api/index.js","components/Chart/Chart.js","components/CountryPicker/CountryPicker.js","App.js","serviceWorker.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/corona.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","console","log","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","barChart","labels","datasets","label","backgroundColor","options","legend","display","title","text","lineChart","length","borderColor","fill","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","src","coronaImage","image","alt","footer","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.eed7f381.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React from 'react';\n\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\n\nimport CountUp from 'react-countup';\n\nimport cx from 'classnames';\n\nimport styles from './Cards.module.css';\n\nconst Cards = ({ data: {confirmed, recovered, deaths, lastUpdate} }) => {\n\n    if (!confirmed) {\n        return 'Loading...';\n    }\n\n    return (\n        <div className={styles.container}>\n            <Grid container spacing={3} justify=\"center\">\n                <Grid item component={Card} xs={12} md={3} className={ cx(styles.card, styles.infected) }>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp\n                                start={0}\n                                end={confirmed.value}\n                                duration={3}\n                                separator=\",\"\n                            />\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of active cases of COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={3} className={ cx(styles.card, styles.recovered) }>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp\n                                start={0}\n                                end={recovered.value}\n                                duration={3}\n                                separator=\",\"\n                            />\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of recoveries from COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={3} className={ cx(styles.card, styles.deaths) }>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp\n                                start={0}\n                                end={deaths.value}\n                                duration={3}\n                                separator=\",\"\n                            />\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of deaths caused by COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n\nexport default Cards;","import axios from 'axios';\n\nconst url = 'https://covid19.mathdro.id/api';\n\n//async & await \nexport const fetchData = async (country) => {\n\n    let changeableUrl = url;\n\n    if (country) {\n        changeableUrl = `${url}/countries/${country}`\n    }\n\n    try {\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\n        \n        return { confirmed, recovered, deaths, lastUpdate };\n\n    } catch (error) {\n\n    }\n}\n\nexport const fetchDailyData = async () => {\n    try {\n        \n        const { data } = await axios.get(`${url}/daily`);\n\n        const modifiedData = data.map((dailyData) => ({\n            confirmed: dailyData.confirmed.total,\n            deaths: dailyData.deaths.total,\n            date: dailyData.reportDate,\n        }));\n\n        return modifiedData;\n\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const fetchCountries = async () => {\n    try {\n        \n        const { data: {countries} } = await axios.get(`${url}/countries`);\n\n        return countries.map((country) => country.name);\n\n    } catch (error) {\n        console.log(error);\n    }\n}","import React, { useState, useEffect } from 'react';\nimport { fetchDailyData, fetchData } from '../../api';\nimport { Line, Bar } from 'react-chartjs-2';\n\nimport styles from './Chart.module.css';\n\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\n\n    const [dailyData, setDailyData] = useState([]);\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setDailyData(await fetchDailyData());\n        }\n\n        fetchAPI();\n    }, []);\n\n    //this chart is for a specific country\n    const barChart = (\n        confirmed ?\n        (\n        <Bar \n            data={{\n                labels: ['Infected', 'Recovered', 'Deaths'],\n                datasets: [{\n                    label: 'Pepple',\n                    backgroundColor: [\n                        'rgba(0, 0, 255, 0.5)',\n                        'rgba(0, 255, 0, 0.5)',\n                        'rgba(255, 0, 0, 0.5)'\n                    ],\n                    data: [confirmed.value, recovered.value, deaths.value]\n                }]\n            }}\n            options={{\n                legend: { display: false },\n                title: { display: true, text: `Current state in ${country}` }\n            }}\n        />\n        ) : null\n    )\n\n    //this chart is for Global\n    const lineChart = (\n        dailyData.length ?\n        (\n        <Line \n            data={{\n                labels: dailyData.map(({ date }) => date),\n                datasets: [{\n                    data: dailyData.map(({ confirmed }) => confirmed),\n                    label: 'Infected',\n                    borderColor: '#3333ff',\n                    fill: true\n                }, {\n                    data: dailyData.map(({ deaths }) => deaths),\n                    label: 'Deaths',\n                    borderColor: 'red',\n                    backgroundColor: 'rgba(255, 0, 0, 0.5)',\n                    fill: true\n                }],\n            }}\n        />\n        ) : null\n    );\n\n    return (\n        <div className={styles.container}>\n            { country ? barChart : lineChart }\n        </div>\n    )\n}\n\nexport default Chart;","import React, { useState, useEffect } from 'react';\nimport { FormControl, NativeSelect } from '@material-ui/core';\n\nimport styles from './CountryPicker.module.css';\n\nimport { fetchCountries } from '../../api';\n\nconst CountryPicker = ({ handleCountryChange }) => {\n\n    const [ fetchedCountries, setFetchedCountries ] = useState([]);\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setFetchedCountries(await fetchCountries());\n        }        \n\n        fetchAPI();\n    }, [setFetchedCountries]);\n\n    return (\n        <FormControl className={styles.formControl}>\n            <NativeSelect defaultValue=\"\" onChange={ (e) => handleCountryChange(e.target.value) }>\n                <option value=\"\">Global</option>\n                {fetchedCountries.map((country, i) => \n                    <option key={i} value={country}>{country}</option>\n                )}\n            </NativeSelect>\n        </FormControl>\n    )\n}\n\nexport default CountryPicker;","import React from 'react';\n\nimport { Cards, Chart, CountryPicker } from './components';\n\nimport { Typography } from '@material-ui/core';\n\nimport styles from './App.module.css';\n\nimport coronaImage from './images/corona.png';\n\nimport { fetchData } from './api';\n\nclass App extends React.Component {\n\n  state = {\n    data: {},\n    country: '',\n  }\n\n  async componentDidMount() {\n    const fetchedData = await fetchData();\n\n    this.setState({ data: fetchedData })\n  }\n\n  handleCountryChange = async (country) => {\n    //fetch the data\n    const fetchedData = await fetchData(country);\n\n    //set the state\n    this.setState({ \n      data: fetchedData,\n      country: country\n    })\n  }\n\n  render() {\n\n    const { data, country } = this.state;\n\n    return (\n        <div className={styles.container}>\n          <img src={coronaImage} className={styles.image} alt=\"COVID-19\" />\n          <Cards data={data} />\n          <CountryPicker handleCountryChange={this.handleCountryChange} />\n          <Chart data={data} country={country} />\n\n          {/* <hr /> */}\n\n          <div className={styles.footer}>\n            <Typography color=\"textSecondary\" variant=\"caption\">\n              <footer>Minh Tran &copy; 2020</footer>\n            </Typography>\n          </div>\n        </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\",\"footer\":\"App_footer__29Fsv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};","module.exports = __webpack_public_path__ + \"static/media/corona.d7265326.png\";"],"sourceRoot":""}